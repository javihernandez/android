/*!
GPII Android Activity Manager

Copyright 2012 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Currently we need to do this in order to work correctly with
// Anode's JS bridge
var thatall = this;

(function () {
    "use strict";

    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");
    var util = require("util");

    var bridge = require("bridge");

    fluid.registerNamespace("gpii.androidActivityManager");
    fluid.registerNamespace("gpii.androidActivityManager.androidSettings");
    fluid.registerNamespace("gpii.androidActivityManager.persistentConfiguration");

    gpii.androidActivityManager.set = function(settingsarray) {
        var font = bridge.load("net.gpii.AndroidFontSettingsImpl", thatall);
        var newFontSize = settingsarray["com.android.activitymanager"][0]["settings"]["text-scaling-factor"];
        font.setFontSize(newFontSize);
        var app = fluid.copy(settingsarray);
        app["com.android.activitymanager"][0]["settings"]["text-scaling-factor"] = {
            "oldValue": 1.0,
            "newValue": newFontSize
        };
        return app;
    };

    fluid.defaults("gpii.androidActivityManager.startTalkback", {
        gradeNames: "fluid.function",
        argumentMap: {
        }
    });

    fluid.defaults("gpii.androidActivityManager.stopTalkback", {
        gradeNames: "fluid.function",
        argumentMap: {
        }
    });

    fluid.defaults("gpii.androidActivityManager.startFreespeech", {
        gradeNames: "fluid.function",
        argumentMap: {
        }
    });

    fluid.defaults("gpii.androidActivityManager.androidSettings.get", {
        gradeNames: "fluid.function",
        argumentMap: {
            settingsarray: 0
        }
    });

    fluid.defaults("gpii.androidActivityManager.androidSettings.set", {
        gradeNames: "fluid.function",
        argumentMap: {
            settingsarray: 0
        }
    });

    fluid.defaults("gpii.androidActivityManager.persistentConfiguration.get", {
        gradeNames: "fluid.function",
        argumentMap: {
            settingsarray: 0
        }
    });

    fluid.defaults("gpii.androidActivityManager.persistentConfiguration.set", {
        gradeNames: "fluid.function",
        argumentMap: {
            settingsarray: 0
        }
    });

    gpii.androidActivityManager.startTalkback = function() {
        var a11y = bridge.load("net.gpii.AndroidA11ySettingsImpl", thatall);
        a11y.startTalkback();
    };

    gpii.androidActivityManager.stopTalkback = function() {
        var a11y = bridge.load("net.gpii.AndroidA11ySettingsImpl", thatall);
        a11y.stopTalkback();
    };

    gpii.androidActivityManager.startFreespeech = function() {
        var intent = bridge.load("net.gpii.AndroidIntentHandlerImpl", thatall);
        intent.startMainLauncherActivity("main","com.blogspot.tonyatkins.freespeech/com.blogspot.tonyatkins.freespeech.activity.StartupActivity");
    };

    gpii.androidActivityManager.androidSettings.get = function(settingsarray) {
        var androidSettings = bridge.load("net.gpii.AndroidSettingsImpl", thatall);
        var app = fluid.copy(settingsarray);

        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var settings = app[appId][j].settings;
                var settingType = app[appId][j].options.settingType;

                for (var settingKey in settings) {
                    settings[settingKey] = androidSettings.get(settingType,
                                                               settingKey);
                }

                var noOptions = { settings: settings };
                app[appId][j] = noOptions;
            }
        }

        return app;
    };

    gpii.androidActivityManager.androidSettings.set = function(settingsarray) {
        var androidSettings = bridge.load("net.gpii.AndroidSettingsImpl", thatall);
        var app = fluid.copy(settingsarray);

        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var settings = app[appId][j].settings;
                var settingType = app[appId][j].options.settingType;

                for (var settingKey in settings) {
                    var value = settings[settingKey];
                    var oldValue;

                    oldValue = androidSettings.get(settingType, settingKey);
                    androidSettings.set(settingType, settingKey, value);

                    settings[settingKey] = {
                        "oldValue": oldValue,
                        "newValue": value
                    };
                }

                var noOptions = { settings: settings};
                app[appId][j] = noOptions;
            }
        }

        return app;
    };

    gpii.androidActivityManager.persistentConfiguration.get = function(settingsarray) {
        var androidPersistentConfig = bridge.load("net.gpii.AndroidPersistentConfigurationImpl", thatall);
        var app = fluid.copy(settingsarray);

        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var settings = app[appId][j].settings;

                for (var setting in settings) {
                    settings[setting] = androidPersistentConfig.get(setting);
                }

                var noOptions = { settings: settings };
                app[appId][j] = noOptions;
            }
        }

        return app;
    };

    gpii.androidActivityManager.persistentConfiguration.set = function(settingsarray) {
        var androidPersistentConfig = bridge.load("net.gpii.AndroidPersistentConfigurationImpl", thatall);
        var app = fluid.copy(settingsarray);

        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var settings = app[appId][j].settings;

                for (var setting in settings) {
                    var value = settings[setting];
                    var oldValue;

                    oldValue = androidPersistentConfig.get(setting);
                    androidPersistentConfig.set(setting, value);

                    settings[setting] = {
                        "oldValue": oldValue,
                        "newValue": value
                    };
                }

                var noOptions = { settings: settings};
                app[appId][j] = noOptions;
            }
        }

        return app;
    };

})();
